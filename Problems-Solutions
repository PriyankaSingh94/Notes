1)   1
    1 1
   1 2 1
  1 3 3 1
 1 4 6 4 1
 
 Sol =>This will have one loop for rows, one for inverted triangle made of spaces and one for values to be displayed
        that will be like

        for (int d = 0; d <= i; d++) {    // display loop variable
              num=(Fact(i)/(Fact(d)*Fact(i-d)));  // i stands for row number
                printf("%d",num);
                printf("  ");    
            }
Note: In this soln the rows loop should run from 0 to less than n.

2) -There are 21 matchsticks.
-The computer asks the player to pick 1, 2, 3 or 4 matchsticks.
-After the person picks, the computer does its picking.
-Whoever is forced to pick up the last matchstick loses the game.
=>
    int main() {
        while(nm >=1) {  //While loop till matchsticks are more than one
            if (nm == 1) {
                // exit code;
                break;
            }
            //scan user input
            if (usr>4) {
                continue;
            }
            //Computers turn
            comp = 5- usr;  // so in one while loop every time 5 match sticks will be picked and in 4 iteration 20 which will leave 1.
            nm = nm - comp-usr;
        }
    }
    
3. Convert input years to roman numerals =>
Steps =>
    1. Take input year.
    2. Have one function with year passed to it. 
        roman(year) {
            check if (year >= 1000) {
                roman(year - 1000)
                print m
            }
            check if (year >= 500) {
                roman(year - 500)
                print d
            }
            check if (year >= 100) {
                roman(year - 100)
                print c
            }
            check if (year >= 50) {
                roman(year - 1000)
                print l
            }
            
            like wise check for 10 5 1
        }
4. Checking of Leap year
    a. If year divisible by 4 and not by 100
    b. If the year is divisible by 400.
5. Prime factors of a number 
    while (num % 2 == 0) {
    print 2 and divide num by 2 subsequently
    }
    for loop from 3 to sqrt(num) {
        while (num % i == 0)
        print i and divide num by i subsequently
    }
    // In case number is prime number greater than 2
    if ( num > 2) 
        print num
 6. #include<stdio.h> 
    int  main() 
    { 
        unsigned int x = -1; 
        int y = ~0; 
        if (x == y) 
            printf("same"); 
        else
            printf("not same"); 
        return 0; 
     }
     Sol. => x is unsigned variable so value of x will be 429467295 and y will become -1. In comparison of x and y (x == y) as x is 
             unsigned values y will be first converted to unsigned and then it will also become 429467295 and O/P will be "same".
             
  7. We need to set p to nC3. If n is large how will you set p correctly.
  => The answer will be n*(n-1)*(n-3)/6 but as n is a big number n*(n-1)*(n-3) will be out of range and we will get overflow so
     the better option is n * (n-1)/2 * (n-2)/3.
     

