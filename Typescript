=> Types available in typescript are boolean, number, string, array,tuple, void, null, undefined,enum ,any , never and 
   object. 
=> We can use backtick to create template strings that can span multiple lines and can have embedded expressions.
=> Tuple eg. = let arr: [string, number]
=> Any is used to opt in and optout from typechecking. We can't use object as it will not allow invoking methods even if 
   those methods are present for the variable.
=> Generics knows which data type has to be returned while any doesnt.
=> Void can only be assigned to null or undefined type.
=> Null, undefined and never are subtype of all data types.
=> No type is assigneble to never.
=> Object represent non primitive datatype.

=> const variable can't be reassigned.
=> let uses lexical scoping or block scoping.
=> A closure is combination of a function and environment within which the function was declared.
=> Callback is a single function called in responce to an event.
=> Javascript allows to emulate private methods using closures.
=> Private methods in java can be accessed only by the methods in same class in same way javascript variables that are private to the method
   can be accessed externally by public methods of that method.
   check => (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) , emulating private methods using closures.
=> Closures provide OOP functionality like data hiding and encapsulation.

Interfaces =>

=> Typecheking focuses on the shape that values have that is known as duck or stuctural typing.
=> Variables use const while property uses readonly.
=> Typescript uses excess property checking. For getting around these checks type assertions can be used or better way is to use string 
   index signature like below.
   
               interface name {
                  [propName: string]: any;
               }
=> Typescript allows interfaces for functions also. The interface will have parameters name and type and return type of the function.
=> When defining the function parameters names of the func can be different from the names given in interface.Parameters declaration
   and usage should be in same order and type.
=> Indexable type can be used in typescript. Two index signatures are supported string and number.

