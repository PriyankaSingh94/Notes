=> Types available in typescript are boolean, number, string, array,tuple, void, null, undefined,enum ,any , never and 
   object. 
=> We can use backtick to create template strings that can span multiple lines and can have embedded expressions.
=> Tuple eg. = let arr: [string, number]
=> Any is used to opt in and optout from typechecking. We can't use object as it will not allow invoking methods even if 
   those methods are present for the variable.
=> Generics knows which data type has to be returned while any doesnt.
=> Void can only be assigned to null or undefined type.
=> Null, undefined and never are subtype of all data types.
=> No type is assigneble to never.
=> Object represent non primitive datatype.

=> const variable can't be reassigned.
=> let uses lexical scoping or block scoping.
=> A closure is combination of a function and environment within which the function was declared.
=> Callback is a single function called in responce to an event.
=> Javascript allows to emulate private methods using closures.
=> Private methods in java can be accessed only by the methods in same class in same way javascript variables that are private to the method
   can be accessed externally by public methods of that method.
   check => (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) , emulating private methods using closures.
=> Closures provide OOP functionality like data hiding and encapsulation.

Interfaces =>

=> Typecheking focuses on the shape that values have that is known as duck or stuctural typing.
=> Variables use const while property uses readonly.
=> Typescript uses excess property checking. For getting around these checks type assertions can be used or better way is to use string 
   index signature like below.
   
               interface name {
                  [propName: string]: any;
               }
=> Typescript allows interfaces for functions also. The interface will have parameters name and type and return type of the function.
=> When defining the function parameters names of the func can be different from the names given in interface.Parameters declaration
   and usage should be in same order and type.
=> Indexable type can be used in typescript. Two index signatures are supported string and number.
=> An object can behave as an object and function both.
=> If interfaces extend classes then they have excess to private and protected memebers too.

Classes

=>Each derived class conataining constructor must call super constructor.Because derived class constructor does not have 
  access to super class members but its object does. So Only a base class constructor can initialize all the class 
  members.
=> C# requires to mention method as public explicitly but in Typescript it is by default public.
=>If we are creating two classes with same shape having private variables, creating instances of those and assigning them to each other
   error will be thrown because those wont be compatible. But class' and its subclass' instance can be assigned to each other.
=>If we are having protected members then they can be accessed using subclasses only.
=>Contructors can be protected means class can not be instantiated outside the containing class but can be extended.
=>If we have Animal class and Dog class extends Animal then we can have 
   let dog: Dog = new Animal(), declaration only if Animal has all class members as Dog has.
=>In javascript every parameter is optional or can be left if, then they will be assigned as null.
=> function buildName(firstName: string, lastName?: string)
      let result1 = buildName("Bob");                  // works correctly now
      let result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters
      let result3 = buildName("Bob", "Adams");         //fine
=>In function declaration optional parameters should follow required parameters. But default parameters can occur at any place. If a default 
   parameter comes before the required parameter then explicitely undefined needs to be passed.
   
   function buildName(firstName: string , lastName= "Will") { }
   let result1 = buildName("Bob"); // Works fine
   let result4 = buildName(undefined, "Adams");   // Works fine
   
   function buildName(firstName = "Will", lastName: string) { }
   let result1 = buildName("Bob"); // error
   let result4 = buildName(undefined, "Adams");   // Works fine

Generics =>
=>We can not create generic enums and namespaces
=>An identity function is a function that will return back what is passed in. It is similar to echo command.
=>Static parameter can not use classes' generic type.
=>We can constraint the function with any or all type which also have certain property.We will create an interface which will have that 
  property and in our class definition we can extend that interface.
=>Constructor can be given as generic.

Enums =>
=>Allow us to define a set of named constants.
=>Typescript have numeric and string type of enums
=>enums without numeric initializer should either come first or after enums initialized with numeric constants.
=>String enums serialize well. String enum allows you to give a readable and meaningful value when your code runs, independent of the name
  of enum member itself.

